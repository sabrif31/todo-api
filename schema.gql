# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

interface Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  firstName: String!
  lastName: String!
  avatar: String
}

type Comment {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Article {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  description: String!
  image: String!
  author: User
}

type ArticleCreateOutput {
  article: Article!
}

type ArticleUpdateOutput {
  article: Article!
}

type ArticleDeleteOutput {
  articleId: ID!
}

type ArticlesPagination {
  totalCount: Float!
  nodes: [Article!]!
}

type UserCreateOutput {
  user: User!
}

type AuthLoginOutput {
  accessToken: String!
}

type CommentCreateOutput {
  comment: Comment
}

type Category {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  activities: [Activity!]
}

type Activity {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  category: Category
  sector: Sector
}

type Sector {
  id: ID!
  name: String!
  activities: [Activity!]
}

type SectorCreateOutput {
  sector: Sector!
}

type CategoryCreateOutput {
  category: Category
}

type CategoriesPagination {
  totalCount: Float!
  nodes: [Category!]!
}

type ActivityCreateOutput {
  activity: Activity
}

type ActivitiesPagination {
  totalCount: Float!
  nodes: [Activity!]!
}

type Query {
  sayHello: String!
  articlesPagination(skip: Int!, take: Int!, sortBy: ArticlesPaginationSortBy): ArticlesPagination!
  sectorList: [Sector!]!
  categoryList: [Category!]!
  categoriesPagination(skip: Int!, take: Int!, sortBy: CategoriesPaginationSortBy): CategoriesPagination!
  getActivityById(id: String!): Activity!
  getActivities: [Activity!]!
  activitiesPagination(skip: Int!, take: Int!, sortBy: ActivitiesPaginationSortBy): ActivitiesPagination!
}

input ArticlesPaginationSortBy {
  createdAt: SortDirection
  title: SortDirection
}

enum SortDirection {
  ASC
  DESC
}

input CategoriesPaginationSortBy {
  createdAt: SortDirection
  name: SortDirection
}

input ActivitiesPaginationSortBy {
  createdAt: SortDirection
  name: SortDirection
}

type Mutation {
  articleCreate(input: ArticleCreateInput!): ArticleCreateOutput!
  articleUpdate(articleId: ID!, input: ArticleUpdateInput!): ArticleUpdateOutput!
  articleDelete(articleId: ID!): ArticleDeleteOutput!
  userCreate(input: UserCreateInput!): UserCreateOutput!
  authLogin(username: String!, password: String!): AuthLoginOutput!
  commentCreate(input: CommentCreateInput!): CommentCreateOutput!
  sectorCreate(input: SectorCreateInput!): SectorCreateOutput!
  categoryCreate(input: CategoryCreateInput!): CategoryCreateOutput!
  activityCreate(input: ActivityCreateInput!): ActivityCreateOutput!
}

input ArticleCreateInput {
  title: String!
  description: String!
  image: String!
}

input ArticleUpdateInput {
  title: String!
  description: String!
  image: String!
}

input UserCreateInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  avatar: String
}

input CommentCreateInput {
  articleId: String!
  message: String!
}

input SectorCreateInput {
  name: String!
}

input CategoryCreateInput {
  name: String!
}

input ActivityCreateInput {
  categoryId: String!
  sectorId: String!
  name: String!
}